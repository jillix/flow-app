#!/usr/bin/env node

// TODO move app installation to service-api
// compile with closure compiler
//  - ccjs bundle.js
// merge engine package config into instances?
// debugging
//  - recompile individual modules
//  - watchify lib/flow.client.js -vd -o 'gzip -9 > M.js'

var fs = require('fs');
var path = require('path');
var zlib = require('zlib');
var browserify = require('browserify');

var base = path.resolve(process.argv[2]);
var base_app_modules = base + '/app_modules';
var base_node_modules = base + '/node_modules';

var flowApi = {
    getInstances: function (app, callback) {

        // TODO check if path "app" exists

        fs.readdir(app + '/composition', function (err, configs) {

            if (err) {
                return callback(err);
            }

            // get all file paths to bundle
            var bundles = {};
            configs.forEach(function (config) {
                config = require(app + '/composition/' + config);

                /*
                    module: "module",
                    module: "/module/file.js:/module/bundle.js"
                    browser: "module/file.js"
                */

                if (!config.server && config.module) {
                    config.module = config.browser || config.module;

                    if (config.module[0] === '/') {
                        bundles[config.module] = true;  
                    } else {
                        bundles[config.module] = false;
                    }
                }
            });

            callback(null, bundles);
        });
    }
};

flowApi.getInstances(base, function (err, bundles) {

    if (err) {
        throw err;
    }

    for (var bundle in bundles) {

        var b = browserify({debug: true});
        var requirePath = bundle;

        if (bundles[bundle]) {
            requirePath = requirePath.split('/');
            requirePath.pop();
            requirePath = requirePath.join('/') + '/bundle.js';
            b.require(base_app_modules + bundle, {expose: requirePath});
            bundle = base_app_modules + requirePath;
        } else {
            b.require(bundle);
            bundle = base_node_modules + '/' + bundle + '/bundle.js';
        }

        console.log('Bundle file:', bundle);
        var gzip = zlib.createGzip({level: zlib.Z_BEST_COMPRESSION});
        var file = fs.createWriteStream(bundle);
        b.bundle().pipe(gzip).pipe(file);
    }
});
